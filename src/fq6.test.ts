import { assert } from 'o1js/dist/node/lib/errors';
import Fq from './fq';
import Fq2 from './fq2'
import Fq6 from './fq6';
import { ForeignField, Field3} from 'o1js/dist/node/lib/gadgets/foreign-field';

/// An element of Fq2, represented by c0 + c1 * u; where u^2 = -1.
describe('test Fq6 bn254', function() {
    //Fq6 First Halo2 Random Parameters
    //c0: c0:
    //243396315656041018029605402550187233771055319601070064817557336100633225
    //c0: c1:
    //486792631312082036059210805100374467542110639202140129635114672201266450
    //c1: c0:
    //243396315656041018029605402550187233771055319601070064817557336100633225
    //c1: c1:
    //2926426369854570369088071089851816439808771074387896944123342170691430575690
    //c2: c0:
    //14122467031815324139623763932299144246693120704533278122458763172487161573493
    //c2: c1:
    //18771297156368092939727873679171789259859850826830295686815922193684037700289


    //Fq6 Second Halo2 Random Parameters
    //c0: c0:
    //10909310004149137988814862231299200400927611156636347915555904953364159779029
    //c0: c1:
    //15515105713814912167975979047768554857341212808312512047788350516889035890945
    //c1: c0:
    //243396315656041018029605402550187233771055319601070064817557336100633225
    //c1: c1:
    //2926426369854570369088071089851816439808771074387896944123342170691430575690
    //c2: c0:
    //14122467031815324139623763932299144246693120704533278122458763172487161573493
    //c2: c1:
    //18771297156368092939727873679171789259859850826830295686815922193684037700289


    //Mul Result Halo2 Random Parameters
    //c0: c0:
    //6642973212751112101615147663046426024327909543677528613852693546089328334340
    //c0: c1:
    //16551619958408328798474555501118628401131206162297662067876669719534659260065
    //c1: c0:
    //9442819309296150376388577281187544594960725908190896236292973932480591696885
    //c1: c1:
    //5536365196918454006493058042967576377553844784130332630073075944375488075664
    //c2: c0:
    //11825727686293638079970891785385506580232672225392215002825048050267475207227
    //c2: c1:
    //16023870745372442504263897330164149298721876845416961942777387968406916255861
  it('Mul Fq6 comparison test', function() {
    let first = new Fq6(
        new Fq2(
            new Fq(243396315656041018029605402550187233771055319601070064817557336100633225n),
            new Fq(486792631312082036059210805100374467542110639202140129635114672201266450n)
        ),
        new Fq2(
            new Fq(243396315656041018029605402550187233771055319601070064817557336100633225n),
            new Fq(2926426369854570369088071089851816439808771074387896944123342170691430575690n)
        ),
        new Fq2(
            new Fq(14122467031815324139623763932299144246693120704533278122458763172487161573493n),
            new Fq(18771297156368092939727873679171789259859850826830295686815922193684037700289n)
        )
    );

    let second = new Fq6(
        new Fq2(
            new Fq(10909310004149137988814862231299200400927611156636347915555904953364159779029n),
            new Fq(15515105713814912167975979047768554857341212808312512047788350516889035890945n)
        ),
        new Fq2(
            new Fq(243396315656041018029605402550187233771055319601070064817557336100633225n),
            new Fq(2926426369854570369088071089851816439808771074387896944123342170691430575690n)
        ),
        new Fq2(
            new Fq(14122467031815324139623763932299144246693120704533278122458763172487161573493n),
            new Fq(18771297156368092939727873679171789259859850826830295686815922193684037700289n)
        )
    );

    let res = second.mul(first);

    console.log("The multiplication result is:");
    console.log(res.c0.c0.toBigInt());
    console.log(res.c0.c1.toBigInt());
    console.log(res.c1.c0.toBigInt());
    console.log(res.c1.c1.toBigInt());
    console.log(res.c2.c0.toBigInt());
    console.log(res.c2.c1.toBigInt());

  });

    //Square Result Halo2 Random Parameters
    //c0: c0:
    //9861749469456790419263505398497782832470482351279215109396266689807085087792
    //c0: c1:
    //9599468815392442452265992615991972285476963503819512368389322507711377574298
    //c1: c0:
    //11103351514121741428672022257377204632894663783980622146901003399355946998719
    //c1: c1:
    //13850079382040043654557621423539026922286792236035585953074382993720470122468
    //c2: c0:
    //10277896384839546392835517159129230451945277828559876034839449140415179507972
    //c2: c1:
    //1919763156133493486522189971767307441680230560584354565479714901004312072980

  it('Square Fq6 comparison test', function() {

    let element_fq6 = new Fq6(
        new Fq2(
            new Fq(10909310004149137988814862231299200400927611156636347915555904953364159779029n),
            new Fq(15515105713814912167975979047768554857341212808312512047788350516889035890945n)
        ),
        new Fq2(
            new Fq(243396315656041018029605402550187233771055319601070064817557336100633225n),
            new Fq(2926426369854570369088071089851816439808771074387896944123342170691430575690n)
        ),
        new Fq2(
            new Fq(14122467031815324139623763932299144246693120704533278122458763172487161573493n),
            new Fq(18771297156368092939727873679171789259859850826830295686815922193684037700289n)
        )
    );

    let res = element_fq6.square();

    console.log("The square result is:");
    console.log(res.c0.c0.toBigInt());
    console.log(res.c0.c1.toBigInt());
    console.log(res.c1.c0.toBigInt());
    console.log(res.c1.c1.toBigInt());
    console.log(res.c2.c0.toBigInt());
    console.log(res.c2.c1.toBigInt());
  });

  it('Square Fq6 Unit test', function() {

    let element_fq6 = new Fq6(
        new Fq2(
            new Fq(10909310004149137988814862231299200400927611156636347915555904953364159779029n),
            new Fq(15515105713814912167975979047768554857341212808312512047788350516889035890945n)
        ),
        new Fq2(
            new Fq(243396315656041018029605402550187233771055319601070064817557336100633225n),
            new Fq(2926426369854570369088071089851816439808771074387896944123342170691430575690n)
        ),
        new Fq2(
            new Fq(14122467031815324139623763932299144246693120704533278122458763172487161573493n),
            new Fq(18771297156368092939727873679171789259859850826830295686815922193684037700289n)
        )
    );

    let res = element_fq6.square();

    console.log("The square result is:");
    console.log(res.c0.c0.toBigInt());
    console.log(res.c0.c1.toBigInt());
    console.log(res.c1.c0.toBigInt());
    console.log(res.c1.c1.toBigInt());
    console.log(res.c2.c0.toBigInt());
    console.log(res.c2.c1.toBigInt());

    let res2 = element_fq6.mul(element_fq6);
    console.log("The square result is:");
    console.log(res2.c0.c0.toBigInt());
    console.log(res2.c0.c1.toBigInt());
    console.log(res2.c1.c0.toBigInt());
    console.log(res2.c1.c1.toBigInt());
    console.log(res2.c2.c0.toBigInt());
    console.log(res2.c2.c1.toBigInt());
  });

    //Mul By Nonresidue Result Halo2 Random Parameters
    //c0: c0:
    //20777934642612723427900378730491408605592990884777912764556794780119511626816
    //c0: c1:
    //7958198464413958819203381082787046875861288887623350002289759758481691207430
    //c1: c0:
    //10909310004149137988814862231299200400927611156636347915555904953364159779029
    //c1: c1:
    //15515105713814912167975979047768554857341212808312512047788350516889035890945
    //c2: c0:
    //243396315656041018029605402550187233771055319601070064817557336100633225
    //c2: c1:
    //2926426369854570369088071089851816439808771074387896944123342170691430575690

  it('Mul By Nonresidue Fq6 Comparison test', function() {

    let element_fq6 = new Fq6(
        new Fq2(
            new Fq(10909310004149137988814862231299200400927611156636347915555904953364159779029n),
            new Fq(15515105713814912167975979047768554857341212808312512047788350516889035890945n)
        ),
        new Fq2(
            new Fq(243396315656041018029605402550187233771055319601070064817557336100633225n),
            new Fq(2926426369854570369088071089851816439808771074387896944123342170691430575690n)
        ),
        new Fq2(
            new Fq(14122467031815324139623763932299144246693120704533278122458763172487161573493n),
            new Fq(18771297156368092939727873679171789259859850826830295686815922193684037700289n)
        )
    );

    let res = element_fq6.mul_by_nonresidue();

    console.log("The mul by nonresidue result is:");
    console.log(res.c0.c0.toBigInt());
    console.log(res.c0.c1.toBigInt());
    console.log(res.c1.c0.toBigInt());
    console.log(res.c1.c1.toBigInt());
    console.log(res.c2.c0.toBigInt());
    console.log(res.c2.c1.toBigInt());

  });

    //Mul By 1 Result Halo2 Random Parameters
    //c0: c0:
    //14769900139156791165339236092966124390391279844061175942482258855988772977539
    //c0: c1:
    //15015521664303908554622766062413724152028816736459260957993678089623273946738
    //c1: c0:
    //7548407765511792787101535806892400634226707573300642589805185147011355295300
    //c1: c1:
    //12297101017816037411404414876763217165227336020758266741712829157214010763001
    //c2: c0:
    //14122467031815324139623763932299144246693120704533278122458763172487161573493
    //c2: c1:
    //18771297156368092939727873679171789259859850826830295686815922193684037700289

    it('Mul By 1 Fq6 Comparison test', function() {

        let element_fq6 = new Fq6(
            new Fq2(
                new Fq(10909310004149137988814862231299200400927611156636347915555904953364159779029n),
                new Fq(15515105713814912167975979047768554857341212808312512047788350516889035890945n)
            ),
            new Fq2(
                new Fq(243396315656041018029605402550187233771055319601070064817557336100633225n),
                new Fq(2926426369854570369088071089851816439808771074387896944123342170691430575690n)
            ),
            new Fq2(
                new Fq(14122467031815324139623763932299144246693120704533278122458763172487161573493n),
                new Fq(18771297156368092939727873679171789259859850826830295686815922193684037700289n)
            )
        );
    
        let res = element_fq6.mul_by_1(
            new Fq2(
                new Fq(243396315656041018029605402550187233771055319601070064817557336100633225n),
                new Fq(2926426369854570369088071089851816439808771074387896944123342170691430575690n)
            )
        );
    
        console.log("The mul by 1 result is:");
        console.log(res.c0.c0.toBigInt());
        console.log(res.c0.c1.toBigInt());
        console.log(res.c1.c0.toBigInt());
        console.log(res.c1.c1.toBigInt());
        console.log(res.c2.c0.toBigInt());
        console.log(res.c2.c1.toBigInt());
    
      });

    //Mul By 01 Result Halo2 Random Parameters
    //c0: c0:
    //15199965171986099895533602247567374326312956104125170812080664964343675041795
    //c0: c1:
    //20439901474584579298403541256333390380588658336378964995011147441815332447894
    //c1: c0:
    //7331039690999634491580429800826670426450224693836739639380095571864645955510
    //c1: c1:
    //21477256320160892540290297687440948501618211711049005507552542613466833017708
    //c2: c0:
    //18037296181727570767559572161702330745510830839000797459787371497833921334283
    //c2: c1:
    //18456924723808797997910532920342934753234971308198881015734343485696590943044
  
    it('Mul By 01 Fq6 Comparison test', function() {

        let element_fq6 = new Fq6(
            new Fq2(
                new Fq(10909310004149137988814862231299200400927611156636347915555904953364159779029n),
                new Fq(15515105713814912167975979047768554857341212808312512047788350516889035890945n)
            ),
            new Fq2(
                new Fq(243396315656041018029605402550187233771055319601070064817557336100633225n),
                new Fq(2926426369854570369088071089851816439808771074387896944123342170691430575690n)
            ),
            new Fq2(
                new Fq(14122467031815324139623763932299144246693120704533278122458763172487161573493n),
                new Fq(18771297156368092939727873679171789259859850826830295686815922193684037700289n)
            )
        );
                

        let res = element_fq6.mul_by_01(
            new Fq2(
                new Fq(243396315656041018029605402550187233771055319601070064817557336100633225n),
                new Fq(2926426369854570369088071089851816439808771074387896944123342170691430575690n)
            ),
            new Fq2(
                new Fq(243396315656041018029605402550187233771055319601070064817557336100633225n),
                new Fq(2926426369854570369088071089851816439808771074387896944123342170691430575690n)
            ).double()
        );
    
        console.log("The mul by 01 result is:");
        console.log(res.c0.c0.toBigInt());
        console.log(res.c0.c1.toBigInt());
        console.log(res.c1.c0.toBigInt());
        console.log(res.c1.c1.toBigInt());
        console.log(res.c2.c0.toBigInt());
        console.log(res.c2.c1.toBigInt());
    
      });


    //Invert Result Halo2 Random Parameters
    //c0: c0:
    //19334132481460903038759077973837642359291650384459261878876118904378708395040
    //c0: c1:
    //8406690257693385451558566958907662027464980059494805906873548059952869378340
    //c1: c0:
    //11696851288876776005246301501981619353887103580591960550186814146145888105636
    //c1: c1:
    //19488271008420641250053327893210794124573223989786531418430041565686038903156
    //c2: c0:
    //6925004583168379203631918209019152219357481026462969548528376895835441117330
    //c2: c1:
    //15905270596138215338232504318847775655735450363760787769853685565029341764515

    it('Invert Fq6 Comparison test', function() {

        let element_fq6 = new Fq6(
            new Fq2(
                new Fq(10909310004149137988814862231299200400927611156636347915555904953364159779029n),
                new Fq(15515105713814912167975979047768554857341212808312512047788350516889035890945n)
            ),
            new Fq2(
                new Fq(243396315656041018029605402550187233771055319601070064817557336100633225n),
                new Fq(2926426369854570369088071089851816439808771074387896944123342170691430575690n)
            ),
            new Fq2(
                new Fq(14122467031815324139623763932299144246693120704533278122458763172487161573493n),
                new Fq(18771297156368092939727873679171789259859850826830295686815922193684037700289n)
            )
        );
                

        let res = element_fq6.invert()
    
        console.log("The invert result is:");
        console.log(res.c0.c0.toBigInt());
        console.log(res.c0.c1.toBigInt());
        console.log(res.c1.c0.toBigInt());
        console.log(res.c1.c1.toBigInt());
        console.log(res.c2.c0.toBigInt());
        console.log(res.c2.c1.toBigInt());
    
      });


    //Frobenius Map Result power 0
    //c0: c0:
      //
    //c0: c1:
      //
    //c1: c0:
      //
    //c1: c1:
      //
    //c2: c0:
      //
    //c2: c1:
      //
      //
      //
    //Frobenius Map Result power 1
    //c0: c0:
    //10909310004149137988814862231299200400927611156636347915555904953364159779029
    //c0: c1:
    //6373137158024363054270426697488720231355098348985311614900687377756190317638
    //c1: c0:
    //13746116313775705806145638064267372665544677901102848884668028624778344480792
    //c1: c1:
    //1013597374927988741184455720400350121253133025245224879879207937278436920356
    //c2: c0:
    //13291146999957685268606537473509415272095745385196639141899657024233379132115
    //c2: c1:
    //4816145691791221616472101313303833273171499890505108237683161782735131867576
      //
      //
    //Frobenius Map Result power 2
    //c0: c0:
    //10909310004149137988814862231299200400927611156636347915555904953364159779029
    //c0: c1:
    //15515105713814912167975979047768554857341212808312512047788350516889035890945
    //c1: c0:
    //1726786887960860259943128551823660805497002256140457632492029847694803789876
    //c1: c1:
    //8648296331172287850116352489031736096823230904916700982929727441031956489395
    //c2: c0:
    //11811019685057509997730282144519065297857783769110589105457177246836682584953
    //c2: c1:
    //8864535522229528152477358324603586339046168360586673288123575620243576749770
      //
      //
    //Frobenius Map Result power 3
    //c0: c0:
    //10909310004149137988814862231299200400927611156636347915555904953364159779029
    //c0: c1:
    //6373137158024363054270426697488720231355098348985311614900687377756190317638
    //c1: c0:
    //13969197905583264789182372302202717778986014392011537858701300478173457197026
    //c1: c1:
    //6686354124850625811935384936309725875705131620801387217017542857594830681727
    //c2: c0:
    //17706194445426519104644924998300911183470333630003120538948639083875843528039
    //c2: c1:
    //8475161472615747434721629549194303901620477147836827006829167643756989671315
      //
      //
    //Frobenius Map Result power 4
    //c0: c0:
    //10909310004149137988814862231299200400927611156636347915555904953364159779029
    //c0: c1:
    //15515105713814912167975979047768554857341212808312512047788350516889035890945
    //c1: c0:
    //20161212587562758921285247588031064095965537845837764960132190489614321785482
    //c1: c1:
    //10313520170812417003041982166373722552064309177993225735635968282921839143498
    //c2: c0:
    //17842999026805716307138765413696340632841717840951780097462135369966608258720
    //c2: c1:
    //16140653065080929352287579486739174578486603127178678350438577975362837967107
      //
      //
    //Frobenius Map Result power 5
    //c0: c0:
    //10909310004149137988814862231299200400927611156636347915555904953364159779029
    //c0: c1:
    //6373137158024363054270426697488720231355098348985311614900687377756190317638
    //c1: c0:
    //16061171524319579849164801124044459732861930021481260582008746686338650739348
    //c1: c1:
    //14188291372060660669126565088547199091738046511251211565792287099771958606500
    //c2: c0:
    //12779144298294346071241349018704223721826543299395887644529779681181229757012
    //c2: c1:
    //8596935707432306171052674882759137913904334118955888418176708468153104669692

    it('Frobenius Map Fq6 Comparison test', function() {

        let element_fq6 = new Fq6(
            new Fq2(
                new Fq(10909310004149137988814862231299200400927611156636347915555904953364159779029n),
                new Fq(15515105713814912167975979047768554857341212808312512047788350516889035890945n)
            ),
            new Fq2(
                new Fq(243396315656041018029605402550187233771055319601070064817557336100633225n),
                new Fq(2926426369854570369088071089851816439808771074387896944123342170691430575690n)
            ),
            new Fq2(
                new Fq(14122467031815324139623763932299144246693120704533278122458763172487161573493n),
                new Fq(18771297156368092939727873679171789259859850826830295686815922193684037700289n)
            )
        );
                

        let res0 = element_fq6.frobenius_map(0n);
    
        console.log("The frobenius map power 0 result is:");
        console.log(res0.c0.c0.toBigInt());
        console.log(res0.c0.c1.toBigInt());
        console.log(res0.c1.c0.toBigInt());
        console.log(res0.c1.c1.toBigInt());
        console.log(res0.c2.c0.toBigInt());
        console.log(res0.c2.c1.toBigInt());

        let res1 = element_fq6.frobenius_map(1n);
    
        console.log("The frobenius map power 1 result is:");
        console.log(res1.c0.c0.toBigInt());
        console.log(res1.c0.c1.toBigInt());
        console.log(res1.c1.c0.toBigInt());
        console.log(res1.c1.c1.toBigInt());
        console.log(res1.c2.c0.toBigInt());
        console.log(res1.c2.c1.toBigInt());

        let res2 = element_fq6.frobenius_map(2n);
    
        console.log("The frobenius map power 2 result is:");
        console.log(res2.c0.c0.toBigInt());
        console.log(res2.c0.c1.toBigInt());
        console.log(res2.c1.c0.toBigInt());
        console.log(res2.c1.c1.toBigInt());
        console.log(res2.c2.c0.toBigInt());
        console.log(res2.c2.c1.toBigInt());

        let res3 = element_fq6.frobenius_map(3n);
    
        console.log("The frobenius map power 3 result is:");
        console.log(res3.c0.c0.toBigInt());
        console.log(res3.c0.c1.toBigInt());
        console.log(res3.c1.c0.toBigInt());
        console.log(res3.c1.c1.toBigInt());
        console.log(res3.c2.c0.toBigInt());
        console.log(res3.c2.c1.toBigInt());

        let res4 = element_fq6.frobenius_map(4n);
    
        console.log("The frobenius map power 4 result is:");
        console.log(res4.c0.c0.toBigInt());
        console.log(res4.c0.c1.toBigInt());
        console.log(res4.c1.c0.toBigInt());
        console.log(res4.c1.c1.toBigInt());
        console.log(res4.c2.c0.toBigInt());
        console.log(res4.c2.c1.toBigInt());

        let res5 = element_fq6.frobenius_map(5n);
    
        console.log("The frobenius map power 5 result is:");
        console.log(res5.c0.c0.toBigInt());
        console.log(res5.c0.c1.toBigInt());
        console.log(res5.c1.c0.toBigInt());
        console.log(res5.c1.c1.toBigInt());
        console.log(res5.c2.c0.toBigInt());
        console.log(res5.c2.c1.toBigInt());
      });
});